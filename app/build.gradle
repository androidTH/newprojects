apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.bugtags.library.plugin'
//apply plugin: 'com.tencent.tinker.patch'

android {
    useLibrary 'org.apache.http.legacy'
    compileSdkVersion 28
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false

    defaultConfig {
        applicationId "com.d6.android.app"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 44 //32 2.2.1
        versionName "2.9.0"
        // Enabling multiDex support.
        multiDexEnabled true
        ndk {
            abiFilters "armeabi" //"armeabi"//'arm64-v8a'//'x86', 'x86_64', 'mips', 'mips64'
        }

    }

    signingConfigs {
        release {
            try {
                storeFile file("d6_android.jks")
                storePassword key_password
                keyAlias "liaox"
                keyPassword author_password
            } catch (ex) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            zipAlignEnabled true
            shrinkResources false
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            zipAlignEnabled true
            shrinkResources false
        }

    }


    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['libs']
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

}

bugtags {
    //自动上传符号表功能配置，如果需要根据 build varint 配置，请参考帮助中心->符号表->Android 符号表->配置自动上传符号表
    appKey "e3ed18af47d9993fbfbc5dc02194079e"  //这里是你的 appKey
    appSecret "e9a27754bef3bc7e6ca8291185b9bea4"    //这里是你的 appSecret，管理员在设置页可以查看
    mappingUploadEnabled true

    //网络跟踪功能配置(企业版)
    //trackingNetworkEnabled true
}

dependencies {
    implementation 'com.android.support:support-v4:26.1.0'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'

    //support
    compile "com.android.support:appcompat-v7:$support_version"
    compile "com.android.support:recyclerview-v7:$support_version"
    compile "com.android.support:support-v4:${support_version}"
    compile "com.android.support:design:${support_version}"
    compile "com.android.support:cardview-v7:${support_version}"
    implementation 'com.squareup.okhttp3:okhttp:3.8.1'

    //anko
    compile "org.jetbrains.anko:anko:$anko_version"
    compile "org.jetbrains.anko:anko-recyclerview-v7:$anko_version"
    compile "org.jetbrains.anko:anko-recyclerview-v7-coroutines:$anko_version"

    //retrofit
    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"
    compile "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"

    //rxjava

    //fresco
    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.yqritc:recyclerview-flexibledivider:1.4.0'
    implementation 'com.facebook.fresco:fresco:1.8.0'
    implementation 'com.flyco.tablayout:FlycoTabLayout_Lib:2.1.2@aar'
    implementation 'com.youth.banner:banner:1.4.10'
    implementation 'com.android.support:multidex:1.0.1'
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.5@aar'
    implementation 'com.qiniu:qiniu-android-sdk:7.3.10'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:0.21'
    implementation 'me.yokeyword:indexablerecyclerview:1.3.0'
    compile project(':IMKit')
    compile project(':cachelib')
    compile project(':umeng_sdk')

    //    compile project(':push')
    compile project(':multi-image-selector')
    implementation 'com.amap.api:location:3.7.0'

    //    compile files('libs/utdid4all-1.1.5.3_proguard.jar')

    //    compile files('libs/umeng-common-1.4.1.jar')
    compile files('libs/bugout_release.jar')
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'

    //    implementation 'me.relex:photodraweeview:1.1.3'
    implementation 'com.google.android:flexbox:1.0.0'
    implementation 'com.contrarywind:wheelview:4.0.7'
    implementation 'com.gyf.immersionbar:immersionbar:2.3.3'
    compile project(':cardlib')
    compile project(':sticker')
    compile project(':library')
    compile project(':update-app')

    //下拉刷新库
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.0-alpha-28'
    implementation 'com.scwang.smartrefresh:SmartRefreshHeader:1.1.0-alpha-28'

    //    implementation 'com.qianwen:update-app:3.5.2'
    implementation 'com.qianwen:okhttp-utils:3.8.0'
    implementation 'org.greenrobot:eventbus:3.1.1'

    //    implementation 'com.umeng.sdk:push-xiaomi:1.0.0'

    //    //没有使用特殊Header，可以不加这行

    //    compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.34'

    //https://github.com/ongakuer/CircleIndicator

    //    compile 'com.github.zcweng:switch-button:0.0.3@aar'

    //debug 包
    debugCompile 'com.bugtags.library:bugtags-lib:3.1.1'
    implementation files('libs/MiPush_SDK_Client_3_6_12.jar')
    implementation 'com.huawei.android.hms:push:2.6.1.301'
    implementation 'com.umeng.umsdk:common:1.5.4'

    //PushSDK必须依赖utdid库，所以需要加入对应依赖
    implementation 'com.umeng.umsdk:utdid:1.1.5.3'

    //PushSDK
    implementation 'com.umeng.umsdk:push:5.0.2'
    implementation files('libs/OpenInstall_v2.2.2.jar')
    implementation 'com.airbnb.android:lottie:2.3.0'
    implementation 'me.jessyan:autosize:1.1.2'

    //    implementation 'com.shuyu:gsyVideoPlayer-java:7.0.2'

    //    implementation 'com.shuyu:GSYVideoPlayer-exo2:7.0.2'

    //    implementation 'com.shuyu:gsyVideoPlayer-armv5:7.0.2'

    //    implementation("com.tencent.tinker:tinker-android-loader:${TINKER_VERSION}") { changing = true }

    //    annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }

    //    compileOnly("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    implementation files('libs/pldroid-player-2.1.8.jar')

    implementation 'com.kailashdabhi:om-recorder:1.1.0'

}

//def gitSha() {
//    try {
////        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
//        String gitRev = "tinker01"
//        if (gitRev == null) {
//            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
//        }
//        return gitRev
//    } catch (Exception e) {
//        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
//    }
//}

//def bakPath = file("${buildDir}/bakApk/")
//
///**
// * you can use assembleRelease to build you base apk
// * use tinkerPatchRelease -POLD_APK=  -PAPPLY_MAPPING=  -PAPPLY_RESOURCE= to build patch
// * add apk from the build/bakApk
// */
//ext {
//    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
//    tinkerEnabled = true
//
//    //for normal build
//    //old apk file to build patch apk
//    tinkerOldApkPath = "${bakPath}/app-release-0614-20-19-18.apk"
//    //proguard mapping file to build patch apk
//    tinkerApplyMappingPath = "${bakPath}/app-release-0612-17-04-07-mapping.txt"
//    //resource R.txt to build patch apk, must input if there is resource changed
//    tinkerApplyResourcePath = "${bakPath}/app-release-0614-20-19-18-R.txt"
//    //only use for build all flavor, if not, just ignore this field
//    tinkerBuildFlavorDirectory = "${bakPath}/app-release-0612-17-04-07"
//}
//
//
//def getOldApkPath() {
//    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
//}
//
//def getApplyMappingPath() {
//    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
//}
//
//def getApplyResourceMappingPath() {
//    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
//}
//
//def getTinkerIdValue() {
//    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
//}
//
//def buildWithTinker() {
//    return hasProperty("TINKER_ENABLE") ? Boolean.parseBoolean(TINKER_ENABLE) : ext.tinkerEnabled
//}
//
//def getTinkerBuildFlavorDirectory() {
//    return ext.tinkerBuildFlavorDirectory
//}
//
//if (buildWithTinker()) {
//    apply plugin: 'com.tencent.tinker.patch'
//
//    tinkerPatch {
//        /**
//         * necessary，default 'null'
//         * the old apk path, use to diff with the new apk to build
//         * add apk from the build/bakApk
//         */
//        oldApk = getOldApkPath()
//        /**
//         * optional，default 'false'
//         * there are some cases we may get some warnings
//         * if ignoreWarning is true, we would just assert the patch process
//         * case 1: minSdkVersion is below 14, but you are using dexMode with raw.
//         *         it must be com.hjimi.logistics.tinkertest.crash when load.
//         * case 2: newly added Android Component in AndroidManifest.xml,
//         *         it must be com.hjimi.logistics.tinkertest.crash when load.
//         * case 3: loader classes in dex.loader{} are not keep in the main dex,
//         *         it must be let tinker not work.
//         * case 4: loader classes in dex.loader{} changes,
//         *         loader classes is ues to load patch dex. it is useless to change them.
//         *         it won't com.hjimi.logistics.tinkertest.crash, but these changes can't effect. you may ignore it
//         * case 5: resources.arsc has changed, but we don't use applyResourceMapping to build
//         */
//        ignoreWarning = true
//
//        /**
//         * optional，default 'true'
//         * whether sign the patch file
//         * if not, you must do yourself. otherwise it can't check success during the patch loading
//         * we will use the sign config with your build type
//         */
//        useSign = true
//
//        /**
//         * optional，default 'true'
//         * whether use tinker to build
//         */
//        tinkerEnable = buildWithTinker()
//
//        /**
//         * Warning, applyMapping will affect the normal android build!
//         */
//        buildConfig {
//            /**
//             * optional，default 'null'
//             * if we use tinkerPatch to build the patch apk, you'd better to apply the old
//             * apk mapping file if minifyEnabled is enable!
//             * Warning:
//             * you must be careful that it will affect the normal assemble build!
//             */
//            applyMapping = getApplyMappingPath()
//            /**
//             * optional，default 'null'
//             * It is nice to keep the resource id from R.txt file to reduce java changes
//             */
//            applyResourceMapping = getApplyResourceMappingPath()
//
//            /**
//             * necessary，default 'null'
//             * because we don't want to check the base apk with md5 in the runtime(it is slow)
//             * tinkerId is use to identify the unique base apk when the patch is tried to apply.
//             * we can use git rev, svn rev or simply versionCode.
//             * we will gen the tinkerId in your manifest automatic
//             */
//            tinkerId = getTinkerIdValue()
//
//            /**
//             * if keepDexApply is true, class in which dex refer to the old apk.
//             * open this can reduce the dex diff file size.
//             */
//            //如果为true会出现：apkVariantData问题  换回gradle2.3.3可以解决
//            keepDexApply = false
//
//            /**
//             * optional, default 'false'
//             * Whether tinker should treat the base apk as the one being protected by app
//             * protection tools.
//             * If this attribute is true, the generated patch package will contain a
//             * dex including all changed classes instead of any dexdiff patch-info files.
//             */
//            isProtectedApp = false
//
//            /**
//             * optional, default 'false'
//             * Whether tinker should support component hotplug (add new component dynamically).
//             * If this attribute is true, the component added in new apk will be available after
//             * patch is successfully loaded. Otherwise an error would be announced when generating patch
//             * on compile-time.
//             *
//             * <b>Notice that currently this feature is incubating and only support NON-EXPORTED Activity</b>
//             */
//            supportHotplugComponent = true
//        }
//
//        dex {
//            /**
//             * optional，default 'jar'
//             * only can be 'raw' or 'jar'. for raw, we would keep its original format
//             * for jar, we would repack dexes with zip format.
//             * if you want to support below 14, you must use jar
//             * or you want to save rom or check quicker, you can use raw mode also
//             */
//            dexMode = "jar"
//
//            /**
//             * necessary，default '[]'
//             * what dexes in apk are expected to deal with tinkerPatch
//             * it support * or ? pattern.
//             */
//            pattern = ["classes*.dex",
//                       "assets/secondary-dex-?.jar"]
//            /**
//             * necessary，default '[]'
//             * Warning, it is very very important, loader classes can't change with patch.
//             * thus, they will be removed from patch dexes.
//             * you must put the following class into main dex.
//             * Simply, you should add your own application {@code tinker.sample.android.SampleApplication}
//             * own tinkerLoader, and the classes you use in them
//             *
//             */
//            loader = [
//                    //use sample, let BaseBuildInfo unchangeable with tinker
//                    "tinker.sample.android.app.BaseBuildInfo"
//            ]
//        }
//
//        lib {
//            /**
//             * optional，default '[]'
//             * what library in apk are expected to deal with tinkerPatch
//             * it support * or ? pattern.
//             * for library in assets, we would just recover them in the patch directory
//             * you can get them in TinkerLoadResult with Tinker
//             */
//            pattern = ["lib/*/*.so"]
//        }
//
//        res {
//            /**
//             * optional，default '[]'
//             * what resource in apk are expected to deal with tinkerPatch
//             * it support * or ? pattern.
//             * you must include all your resources in apk here,
//             * otherwise, they won't repack in the new apk resources.
//             */
//            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
//
//            /**
//             * optional，default '[]'
//             * the resource file exclude patterns, ignore add, delete or modify resource change
//             * it support * or ? pattern.
//             * Warning, we can only use for files no relative with resources.arsc
//             */
//            ignoreChange = ["assets/sample_meta.txt"]
//
//            /**
//             * default 100kb
//             * for modify resource, if it is larger than 'largeModSize'
//             * we would like to use bsdiff algorithm to reduce patch file size
//             */
//            largeModSize = 100
//        }
//
//        packageConfig {
//            /**
//             * optional，default 'TINKER_ID, TINKER_ID_VALUE' 'NEW_TINKER_ID, NEW_TINKER_ID_VALUE'
//             * package meta file gen. path is assets/package_meta.txt in patch file
//             * you can use securityCheck.getPackageProperties() in your ownPackageCheck method
//             * or TinkerLoadResult.getPackageConfigByName
//             * we will get the TINKER_ID from the old apk manifest for you automatic,
//             * other config files (such as patchMessage below)is not necessary
//             */
//            configField("patchMessage", "tinker is sample to use")
//            /**
//             * just a sample case, you can use such as sdkVersion, brand, channel...
//             * you can parse it in the SamplePatchListener.
//             * Then you can use patch conditional!
//             */
//            configField("platform", "all")
//            /**
//             * patch version via packageConfig
//             */
//            configField("patchVersion", "1.0")
//        }
//        //or you can add config filed outside, or get meta value from old apk
//        //project.tinkerPatch.packageConfig.configField("test1", project.tinkerPatch.packageConfig.getMetaDataFromOldApk("Test"))
//        //project.tinkerPatch.packageConfig.configField("test2", "sample")
//
//        /**
//         * if you don't use zipArtifact or path, we just use 7za to try
//         */
//        sevenZip {
//            /**
//             * optional，default '7za'
//             * the 7zip artifact path, it will use the right 7za with your platform
//             */
//            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
//            /**
//             * optional，default '7za'
//             * you can specify the 7za path yourself, it will overwrite the zipArtifact value
//             */
////        path = "/usr/local/bin/7za"
//        }
//    }
//
//    List<String> flavors = new ArrayList<>();
//    project.android.productFlavors.each { flavor ->
//        flavors.add(flavor.name)
//    }
//    boolean hasFlavors = flavors.size() > 0
//    def date = new Date().format("MMdd-HH-mm-ss")
//
//    /**
//     * bak apk and mapping
//     */
//    android.applicationVariants.all { variant ->
//        /**
//         * task type, you want to bak
//         */
//        def taskName = variant.name
//
//        tasks.all {
//            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
//
//                it.doLast {
//                    copy {
//                        def fileNamePrefix = "${project.name}-${variant.baseName}"
//                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"
//
//                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
//                        from variant.outputs.first().outputFile
//                        into destPath
//                        rename { String fileName ->
//                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
//                        }
//
//                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
//                        into destPath
//                        rename { String fileName ->
//                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
//                        }
//
//                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
//                        into destPath
//                        rename { String fileName ->
//                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
//                        }
//                    }
//                }
//            }
//        }
//    }
//    project.afterEvaluate {
//        //sample use for build all flavor for one time
//        if (hasFlavors) {
//            task(tinkerPatchAllFlavorRelease) {
//                group = 'tinker'
//                def originOldPath = getTinkerBuildFlavorDirectory()
//                for (String flavor : flavors) {
//                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
//                    dependsOn tinkerTask
//                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
//                    preAssembleTask.doFirst {
//                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
//                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
//                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
//                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"
//
//                    }
//
//                }
//            }
//
//            task(tinkerPatchAllFlavorDebug) {
//                group = 'tinker'
//                def originOldPath = getTinkerBuildFlavorDirectory()
//                for (String flavor : flavors) {
//                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
//                    dependsOn tinkerTask
//                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
//                    preAssembleTask.doFirst {
//                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
//                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
//                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
//                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
//                    }
//                }
//            }
//        }
//    }
//}